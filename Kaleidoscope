import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Kaleidoscope extends JPanel implements MouseMotionListener, MouseWheelListener {
    private List<Color> colors;
    private int currentPattern = 0;
    private int mouseX = -1;
    private int mouseY = -1;
    private double rotationAngle = 0.0;
    private double rotationSpeed = 0.005;
    private double zoom = 1.0;
    private Color outlineColor = Color.WHITE;
    private Color borderColor = Color.BLACK;

    public Kaleidoscope() {
        colors = new ArrayList<>();
        Random random = new Random();
        generateRandomColors();

        setPreferredSize(new Dimension(800, 600));
        addMouseMotionListener(this);
        addMouseWheelListener(this);

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new FlowLayout());

        String[] colorPatterns = {"Random", "Blue", "Red", "Green"};
        JComboBox<String> colorPatternComboBox = new JComboBox<>(colorPatterns);
        inputPanel.add(new JLabel("Select Color Pattern:"));
        inputPanel.add(colorPatternComboBox);

        JButton applyButton = new JButton("Apply");
        applyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedColorPattern = (String) colorPatternComboBox.getSelectedItem();
                if (selectedColorPattern.equals("Random")) {
                    generateRandomColors();
                } else if (selectedColorPattern.equals("Blue")) {
                    setSingleColorPattern(Color.BLUE);
                } else if (selectedColorPattern.equals("Red")) {
                    setSingleColorPattern(Color.RED);
                } else if (selectedColorPattern.equals("Green")) {
                    setSingleColorPattern(Color.GREEN);
                }
                repaint();
            }
        });
        inputPanel.add(applyButton);

        String[] patternTypes = {"Circles", "Squares", "Triangles", "Pentagon"};
        JComboBox<String> patternTypeComboBox = new JComboBox<>(patternTypes);
        inputPanel.add(new JLabel("Select Pattern Type:"));
        inputPanel.add(patternTypeComboBox);

        JButton applyPatternButton = new JButton("Apply Pattern");
        applyPatternButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedPatternType = (String) patternTypeComboBox.getSelectedItem();
                if (selectedPatternType.equals("Circles")) {
                    currentPattern = 0;
                } else if (selectedPatternType.equals("Squares")) {
                    currentPattern = 1;
                } else if (selectedPatternType.equals("Triangles")) {
                    currentPattern = 2;
                } else if (selectedPatternType.equals("Pentagon")) {
                    currentPattern = 3;
                }
                repaint();
            }
        });
        inputPanel.add(applyPatternButton);

        setLayout(new BorderLayout());
        add(inputPanel, BorderLayout.NORTH);

        // Input Thread
        Thread inputThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    handleUserInput();
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        inputThread.start();
    }

    private void setSingleColorPattern(Color color) {
        colors.clear();
        for (int i = 0; i < 6; i++) {
            colors.add(color);
        }
    }

    private void generateRandomColors() {
        colors.clear();
        Random random = new Random();
        for (int i = 0; i < 6; i++) {
            int r = random.nextInt(256);
            int g = random.nextInt(256);
            int b = random.nextInt(256);
            colors.add(new Color(r, g, b));
        }
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        int notches = e.getWheelRotation();
        if (notches < 0) {
            zoom *= 1.1;
        } else {
            zoom /= 1.1;
        }
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int kaleidoscopeSize = (int) (150 * zoom);
        int spacing = kaleidoscopeSize / 2;

        int numCols = getWidth() / spacing;
        int numRows = getHeight() / spacing;

        g.setColor(borderColor);
        g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);

        for (int row = 0; row < numRows; row++) {
            for (int col = 0; col < numCols; col++) {
                int centerX = col * spacing;
                int centerY = row * spacing;

                int numSegments = 24;
                double angleIncrement = 2 * Math.PI / numSegments + rotationAngle;

                for (int j = 0; j < numSegments; j++) {
                    int x1 = (int) (centerX + Math.cos(j * angleIncrement) * kaleidoscopeSize / 2);
                    int y1 = (int) (centerY + Math.sin(j * angleIncrement) * kaleidoscopeSize / 2);
                    int x2 = (int) (centerX + Math.cos((j + 1) * angleIncrement) * kaleidoscopeSize / 2);
                    int y2 = (int) (centerY + Math.sin((j + 1) * angleIncrement) * kaleidoscopeSize / 2);

                    int colorIndex = j % colors.size();

                    g.setColor(outlineColor);
                    if (currentPattern == 0) {
                        g.drawOval(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
                    } else if (currentPattern == 1) {
                        g.drawRect(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
                    } else if (currentPattern == 2) {
                        Polygon triangle = new Polygon();
                        triangle.addPoint(centerX, centerY);
                        triangle.addPoint(x1, y1);
                        triangle.addPoint(x2, y2);
                        g.drawPolygon(triangle);
                    } else if (currentPattern == 3) {
                        int[] xPoints = {centerX, x1, x2, (x1 + x2) / 2, (x1 + x2) / 2};
                        int[] yPoints = {centerY, y1, y2, y1, y2};
                        g.drawPolygon(xPoints, yPoints, 5);
                    }

                    g.setColor(colors.get(colorIndex));
                    if (currentPattern == 0) {
                        g.fillOval(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
                    } else if (currentPattern == 1) {
                        g.fillRect(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
                    } else if (currentPattern == 2) {
                        Polygon triangle = new Polygon();
                        triangle.addPoint(centerX, centerY);
                        triangle.addPoint(x1, y1);
                        triangle.addPoint(x2, y2);
                        g.fillPolygon(triangle);
                    } else if (currentPattern == 3) {
                        int[] xPoints = {centerX, x1, x2, (x1 + x2) / 2, (x1 + x2) / 2};
                        int[] yPoints = {centerY, y1, y2, y1, y2};
                        g.fillPolygon(xPoints, yPoints, 5);
                    }
                }
            }
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (mouseX != -1 && mouseY != -1) {
            int dx = e.getX() - mouseX;
            int dy = e.getY() - mouseY;
            rotationAngle += Math.atan2(dy, dx) * rotationSpeed;
            repaint();
        }
        mouseX = e.getX();
        mouseY = e.getY();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    private void handleUserInput() {
        // Handle user input here
        // ...
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Kaleidoscope");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.setContentPane(new Kaleidoscope());
            frame.setVisible(true);
        });
    }
}
